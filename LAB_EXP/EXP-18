#include <stdio.h>

#define MAX 100

void firstFit(int blockSize[], int blockCount, int processSize[], int processCount) {
    int allocation[MAX], i, j;

    // Initialize all allocations as -1 (not allocated)
    for (i = 0; i < processCount; i++) {
        allocation[i] = -1;
    }

    // Allocate memory for each process
    for (i = 0; i < processCount; i++) {
        for (j = 0; j < blockCount; j++) {
            if (blockSize[j] >= processSize[i]) {
                // Assign block j to process i
                allocation[i] = j;

                // Reduce the block size
                blockSize[j] -= processSize[i];
                break; // Exit the loop after allocation
            }
        }
    }

    // Print the results
    printf("Process No.\tProcess Size\tBlock No.\n");
    for (i = 0; i < processCount; i++) {
        printf("%d\t\t%d\t\t", i + 1, processSize[i]);
        if (allocation[i] != -1) {
            printf("%d\n", allocation[i] + 1); // Block numbers start from 1
        } else {
            printf("Not Allocated\n");
        }
    }
}

int main() {
    int blockCount, processCount, i;

    // Input block sizes
    printf("Enter the number of blocks: ");
    scanf("%d", &blockCount);
    int blockSize[blockCount];
    printf("Enter the sizes of the blocks:\n");
    for (i = 0; i < blockCount; i++) {
        scanf("%d", &blockSize[i]);
    }

    // Input process sizes
    printf("Enter the number of processes: ");
    scanf("%d", &processCount);
    int processSize[processCount];
    printf("Enter the sizes of the processes:\n");
    for (i = 0; i < processCount; i++) {
        scanf("%d", &processSize[i]);
    }

    // Call the First Fit function
    firstFit(blockSize, blockCount, processSize, processCount);

    return 0;
}
